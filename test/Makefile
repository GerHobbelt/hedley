CLANG_C_FLAGS = -Weverything -Wno-vla -Wno-covered-switch-default -Werror
GCC_C_FLAGS = -Wall -Wextra -Werror

ifeq ($(notdir $(CC)), clang)
  CFLAGS ?= $(CLANG_C_FLAGS)
else ifeq ($(notdir $(CC)), suncc)
  CFLAGS ?= -errwarn -errtags
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)),$(filter $(notdir $(CC)),armcl cl2000 cl430 cl6x cl7x clpru))
  CFLAGS ?= --display_error_number --emit_warnings_as_errors --issue_remarks -i $(dir $(shell readlink -f $(shell which $(CC))))../include
  C_OUTPUT_FILE := --output_file=
else ifeq ($(notdir $(CC)),$(filter $(notdir $(CC)),pgcc nvc))
  CFLAGS ?= -Minform=inform -c11
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)), nvcc)
  CFLAGS ?= --Werror all-warnings
  C_OUTPUT_FILE := --output-file=
else ifeq ($(notdir $(CC)), xlc)
  CFLAGS ?= $(CLANG_C_FLAGS)
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)), icc)
  CFLAGS ?= -w3 -Werror
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)), tcc)
  CFLAGS ?=
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)), gcc)
  CFLAGS ?= $(GCC_C_FLAGS)
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)), x86_64-w64-mingw32-gcc)
  CFLAGS ?= $(GCC_C_FLAGS)
  C_OUTPUT_FILE := -o
else ifeq ($(notdir $(CC)), ccomp)
  CFLAGS ?= -Wall
  C_OUTPUT_FILE := -o
else
  CFLAGS ?= $(filter-out -Werror,$(GCC_C_FLAGS))
endif

CLANG_CXX_FLAGS = -Weverything -Werror
GCC_CXX_FLAGS = -Wall -Wextra -Werror

ifeq ($(notdir $(CXX)), clang++)
  CXXFLAGS ?= $(CLANG_CXX_FLAGS)
else ifeq ($(notdir $(CXX)), sunCC)
  CXXFLAGS ?= -errwarn=%all -errtags=yes
  CXX_OUTPUT_FILE := -o
else ifeq ($(notdir $(CXX)), pgc++)
  CXXFLAGS ?= --display_error_number -Minform=inform -Werror
  CXX_OUTPUT_FILE := -o
else ifeq ($(notdir $(CXX)), nvc++)
  CXXFLAGS ?= --display_error_number -Minform=inform -Werror
  CXX_OUTPUT_FILE := -o
else ifeq ($(notdir $(CXX)),$(filter $(notdir $(CC)),armcl cl2000 cl430 cl6x cl7x clpru))
  CXXFLAGS ?= --display_error_number --emit_warnings_as_errors --issue_remarks -i $(dir $(shell readlink -f $(shell which $(CC))))../include
  CXX_OUTPUT_FILE := --output_file=
else ifeq ($(notdir $(CXX)), xlc++)
  CXXFLAGS ?= $(CLANG_CXX_FLAGS)
  CXX_OUTPUT_FILE := -o
else ifeq ($(notdir $(CXX)), icpc)
  CXXFLAGS ?= $(GCC_CXX_FLAGS)
  CXX_OUTPUT_FILE := -o
else ifeq ($(notdir $(CXX)), g++)
  CXXFLAGS ?= $(GCC_CXX_FLAGS)
  CXX_OUTPUT_FILE := -o
else ifeq ($(notdir $(CXX)), x86_64-w64-mingw32-g++)
  CFLAGS ?= $(GCC_CXX_FLAGS)
  C_OUTPUT_FILE := -o
else
  CXXFLAGS ?= $(filter-out -Werror,$(GCC_CXX_FLAGS))
endif

C_OUTPUT_FILE ?= --output=
CXX_OUTPUT_FILE ?= --output=

NULL =

TESTS = \
	array-param \
	assume \
	cast \
	concat \
	const \
	constant \
	deprecated \
	empty-bases \
	fallthrough \
	flags \
	inline \
	likely \
	malloc \
	message \
	noinline \
	no-escape \
	no-return \
	non-null \
	predict \
	printf-format \
	pure \
	require \
	restrict \
	returns-non-null \
	sentinel \
	static-assert \
	stringify \
	unknown-cpp-attributes \
	unknown-pragmas \
	unavailable \
	unreachable \
	unused-function \
	visibility \
	warn \
	warn-unused-result \
	$(NULL)

ifneq ($(CXX), none)
CXXTESTS = $(TESTS:=-cpp)
else
CXXTESTS =
endif

CLEANFILES = \
	$(TESTS) \
	$(TESTS:=-cpp) \
	$(TESTS:=.cpp) \
	$(NULL)

GENERATED_FILES = \
	.gitignore \
	Makefile.dmc \
	Makefile.iar \
	Makefile.icl \
	Makefile.msvc \
	Makefile.pelles \
	$(NULL)

all: generate $(TESTS) $(CXXTESTS)

.PHONY: generate
generate: $(GENERATED_FILES)

%.cpp: %.c
	cp -a $^ $@

%-cpp: %.cpp
	$(CXX) $(CXXFLAGS) $(CXX_OUTPUT_FILE)$@ $(^:.c=.cpp)

%: %.c
	$(CC) $(CFLAGS) $(C_OUTPUT_FILE)$@ $^

define GEN_GCC_C_WARNINGS
$(1): $(1:=.c)
	$(CC) $(filter-out -Werror,$(CFLAGS)) $(C_OUTPUT_FILE)$(1) $(1:=.c)
endef

define GEN_GCC_CXX_WARNINGS
$(1)-cpp: $(1:=.cpp)
	$(CXX) $(filter-out -Werror,$(CXXFLAGS)) $(CXX_OUTPUT_FILE)$(1) $(1:=.cpp)
endef

ECHO ?= echo

.gitignore: Makefile
	@$(ECHO) -e "# Generated by Makefile. Do not edit." > $@
	@$(foreach file,$(TESTS),$(ECHO) -e "/$(file)\n/$(file:=.exe)\n/$(file:=.cpp)\n/$(file:=-cpp)\n/$(file:=-cpp.exe)\n/$(file:=-cpp.o)\n/$(file:=.obj)\n/$(file:=.lib)\n/$(file:=-cpp.obj)\n/$(file:=-cpp.lib)\n/$(file:=.o)\n/$(file:=.map)\n/$(file:=-cpp.map)" >> $@;)

Makefile.iar: Makefile
	@$(ECHO) -e "# Generated by Makefile. Do not edit.\r" > $@
	@$(ECHO) -e "CC = \"C:\x5cProgram Files (x86)\x5cIAR Systems\x5cEmbedded Workbench 8.4\x5carm\x5cbin\x5ciccarm.exe\"\r" >> $@
	@$(ECHO) -e "CXX = \x24(CC)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "CFLAGS = --silent --remarks --warnings_are_errors\r" >> $@
	@$(ECHO) -e "CXXFLAGS = --c++ \x24(CFLAGS)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.o) $(file:=-cpp.o) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "CLEANFILES = \x24(TESTS) \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.cpp) $(file:=.o) $(file:=-cpp.o) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "all: \x24(TESTS)\r\n\r" >> $@
	@$(ECHO) -e "clean:\r\n\tdel /Q \x24(CLEANFILES)\r\n\r" >> $@

	@$(foreach file,$(TESTS),$(ECHO) -e "$(file:=.o): $(file:=.c)\r\n\t\x24(CC) \x24(CFLAGS) --output \x24(@) \x24(?)\r\n$(file:=.cpp): $(file:=.c)\r\n\tcopy /Y \x24(?) \x24(@) >NUL\r\n$(file:=-cpp.o): $(file:=.cpp)\r\n\t\x24(CXX) \x24(CXXFLAGS) --output \x24(@) \x24(?)\r\n\r" >> $@;)

Makefile.dmc: Makefile
	@$(ECHO) -e "# Generated by Makefile. Do not edit.\r" > $@
	@$(ECHO) -e "CC ?= \"dmc.exe\"\r" >> $@
	@$(ECHO) -e "CXX ?= \x24(CC)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "CFLAGS ?= -w -w17 -w18 -wx\r" >> $@
	@$(ECHO) -e "CXXFLAGS ?= -wc \x24(CFLAGS)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.exe) $(file:=-cpp.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "CLEANFILES = \x24(TESTS) \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.cpp) $(file:=.exe) $(file:=-cpp.exe) $(file:=.map) $(file:=-cpp.map) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "all: \x24(TESTS)\r\n\r" >> $@
	@$(ECHO) -e "clean:\r\n\tdel /Q \x24(CLEANFILES)\r\n\r" >> $@

	@$(foreach file,$(TESTS),$(ECHO) -e "$(file:=.exe): $(file:=.c)\r\n\t\x24(CC) \x24(CFLAGS) -o \x24(@) \x24(?)\r\n$(file:=.cpp): $(file:=.c)\r\n\tcp -f \x24(?) \x24(@)\r\n$(file:=-cpp.exe): $(file:=.cpp)\r\n\t\x24(CXX) \x24(CXXFLAGS) -o \x24(@) \x24(?)\r\n\r" >> $@;)

Makefile.msvc: Makefile
	@$(ECHO) -e "# Generated by Makefile. Do not edit.\r" > $@
	@$(ECHO) -e "CC = cl\r" >> $@
	@$(ECHO) -e "CXX = \x24(CC)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "CFLAGS = /nologo /Wall /wd4464 /wd4514\r" >> $@
	@$(ECHO) -e "CXXFLAGS = \x24(CFLAGS)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.exe) $(file:=-cpp.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.exe) $(file:=-cpp.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "CLEANFILES = \x24(TESTS) \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.cpp) $(file:=.obj) $(file:=.lib) $(file:=-cpp.exp) $(file:=-cpp.lib) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "all: \x24(TESTS)\r\n\r" >> $@
	@$(ECHO) -e "clean:\r\n\tdel /Q \x24(CLEANFILES)\r\n\r" >> $@

	@$(foreach file,$(TESTS),$(ECHO) -e "$(file:=.exe): $(file:=.c)\r\n\t\x24(CC) \x24(CFLAGS) /Fe\x24(@) \x24(?)\r\n$(file:=.cpp): $(file:=.c)\r\n\tcopy /Y \x24(?) \x24(@) >NUL\r\n$(file:=-cpp.exe): $(file:=.cpp)\r\n\t\x24(CXX) \x24(CXXFLAGS) /Fe\x24(@) \x24(?)\r\n\r" >> $@;)

Makefile.icl: Makefile
	@$(ECHO) -e "# Generated by Makefile. Do not edit.\r" > $@
	@$(ECHO) -e "CC = icl\r" >> $@
	@$(ECHO) -e "CXX = \x24(CC)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "CFLAGS = /nologo /Wall /wd4464 /wd4514\r" >> $@
	@$(ECHO) -e "CXXFLAGS = \x24(CFLAGS)\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.exe) $(file:=-cpp.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.exe) $(file:=-cpp.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "CLEANFILES = \x24(TESTS) \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.cpp) $(file:=.obj) $(file:=.lib) $(file:=-cpp.exp) $(file:=-cpp.lib) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "all: \x24(TESTS)\r\n\r" >> $@
	@$(ECHO) -e "clean:\r\n\tdel /Q \x24(CLEANFILES)\r\n\r" >> $@

	@$(foreach file,$(TESTS),$(ECHO) -e "$(file:=.exe): $(file:=.c)\r\n\t\x24(CC) \x24(CFLAGS) /Fe\x24(@) \x24(?)\r\n$(file:=.cpp): $(file:=.c)\r\n\tcopy /Y \x24(?) \x24(@) >NUL\r\n$(file:=-cpp.exe): $(file:=.cpp)\r\n\t\x24(CXX) \x24(CXXFLAGS) /Fe\x24(@) \x24(?)\r\n\r" >> $@;)

Makefile.pelles: Makefile
	@$(ECHO) -e "# Generated by Makefile. Do not edit.\r" > $@
	@$(ECHO) -e "CC ?= pocc\r" >> $@
	@$(ECHO) -e "LD ?= polink\r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "CFLAGS ?= \r" >> $@
	@$(ECHO) -e "LDFLAGS ?= \r" >> $@
	@$(ECHO) -e "\r" >> $@

	@$(ECHO) -e "TESTS = \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "CLEANFILES = \x24(TESTS) \x5c\r" >> $@
	@$(foreach file,$(TESTS),$(ECHO) -e "\t$(file:=.obj) $(file:=.exe) \x5c\r" >> $@;)
	@$(ECHO) -e "\t\x24(NULL)\r\n\r" >> $@

	@$(ECHO) -e "all: \x24(TESTS)\r\n\r" >> $@
	@$(ECHO) -e "clean:\r\n\tdel /Q \x24(CLEANFILES)\r\n\r" >> $@

	@$(foreach file,$(TESTS),$(ECHO) -e "$(file:=.obj): $(file:=.c)\r\n\t\x24(CC) \x24(CFLAGS) $(file:=.c)\r\n\r\n$(file:=.exe): $(file:=.obj)\r\n\t\x24(LD) \x24(LDFLAGS) /OUT:$(file:=.exe) $(file:=.obj)\r\n\r" >> $@;)

clean:
	rm -f $(CLEANFILES)

maintainer-clean: clean
	rm -rf $(GENERATED_FILES)

.PHONY: clean all

ifeq ($(notdir $(CC)), gcc)
$(foreach tgt,unavailable warn unknown-pragmas,$(eval $(call GEN_GCC_C_WARNINGS,$(tgt))))
else ifeq ($(notdir $(CC)), x86_64-w64-mingw32-gcc)
$(foreach tgt,unavailable warn unknown-pragmas,$(eval $(call GEN_GCC_C_WARNINGS,$(tgt))))
endif

ifeq ($(notdir $(CXX)), g++)
$(foreach tgt,unavailable warn unknown-pragmas,$(eval $(call GEN_GCC_CXX_WARNINGS,$(tgt))))
else ifeq ($(notdir $(CXX)), x86_64-w64-mingw32-g++)
$(foreach tgt,unavailable warn unknown-pragmas,$(eval $(call GEN_GCC_CXX_WARNINGS,$(tgt))))
endif
